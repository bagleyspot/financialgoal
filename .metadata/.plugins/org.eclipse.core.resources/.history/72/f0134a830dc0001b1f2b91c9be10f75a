package come.project.financialgoalbe.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import come.project.financialgoalbe.response.BondDealResponse;
import come.project.financialgoalbe.response.BondResponse;
import come.project.financialgoalbe.response.CountryResponse;
import come.project.financialgoalbe.response.EquityResponse;
import come.project.financialgoalbe.response.FolderResponse;
import come.project.financialgoalbe.entities.Bond;
import come.project.financialgoalbe.entities.BondDeal;
import come.project.financialgoalbe.entities.Country;
import come.project.financialgoalbe.entities.Equity;
import come.project.financialgoalbe.entities.EquityDeal;
import come.project.financialgoalbe.entities.Folder;
import come.project.financialgoalbe.repository.BondDealRepository;
import come.project.financialgoalbe.repository.BondRepository;
import come.project.financialgoalbe.repository.CountryRepository;
import come.project.financialgoalbe.repository.EquityRepository;
import come.project.financialgoalbe.repository.FolderRepository;
import come.project.financialgoalbe.repository.UserRepository;
import come.project.financialgoalbe.request.BondDealRequest;

@Service
public class FinancialGoalService {
	
	@Autowired
	BondRepository bondRepository;
	
	@Autowired
	EquityRepository equityRepository;
	
	@Autowired
	CountryRepository countryRepository;
	
	@Autowired
	BondDealRepository bondDealRepository;
	
	@Autowired
	UserRepository userRepository;
	
	@Autowired
	FolderRepository folderRepository;

	public List<BondResponse> getAllBonds() {
		List<Bond> listBond = bondRepository.findAll();
		List<BondResponse> listBondResponse = new ArrayList();
		for ( Bond elem : listBond) {
			BondResponse bondResponse = new BondResponse();
			bondResponse.toResponse(elem);
			listBondResponse.add(bondResponse);
		}
		return listBondResponse;
	}
	
	public List<EquityResponse> getAllEquity() {
		List<Equity> listEquity = equityRepository.findAll();
		List<EquityResponse> listEquityResponse = new ArrayList();
		for ( Equity elem : listEquity) {
			EquityResponse equityResponse = new EquityResponse();
			equityResponse.toResponse(elem);
			listEquityResponse.add(equityResponse);
		}
		return listEquityResponse;
	}

	public List<BondDealResponse> getBondsDealByOwner(long idOwner) {
		List<BondDeal> listBondDeal = bondDealRepository.findBondDealByOwner(idOwner);
		List<BondDealResponse> listBondDealResponse = new ArrayList();
		for ( BondDeal elem : listBondDeal) {
			BondDealResponse bondDealResponse = new BondDealResponse();
			bondDealResponse.toResponse(elem);
			listBondDealResponse.add(bondDealResponse);
		}
		return listBondDealResponse;
	}

	public List<CountryResponse> getAllCountry() {
		
		List<Country> listCountry = countryRepository.findAll();
		List<CountryResponse> listCountryResponse = new ArrayList();
		for ( Country elem : listCountry) {
			CountryResponse countryResponse = new CountryResponse();
			countryResponse.toResponse(elem);
			listCountryResponse.add(countryResponse);
		}
		return listCountryResponse;
	}

	public String operationBond(BondDealRequest bondDealReq) {
		BondDeal bondDeal = bondDealReq.toEntity(userRepository, bondRepository, folderRepository);
		bondDeal = bondDealRepository.save(bondDeal);
		if ( bondDeal == null) {
			return "Operation not registered";
		}
		else {
			if ( bondDeal.getTypeOfDeal().equals("B")) return "Purchase registered";
			else return "Sale registered";
		}
	}
	
	public String operationEquity(EquityDealRequest equityDealReq) {
		EquityDeal equityDeal = equityDealReq.toEntity();
		equityDeal = equityDealRepository.save(equityDeal);
		if ( equityDeal == null) {
			return "Operation not registered";
		}
		else {
			if ( equityDeal.getTypeOfDeal().equals("B")) return "Puchase registered";
			else return "Sale registered";
		}
	}

	public List<String> getFolderbyOwneer(int idOwner) {
		List<String> listFolder = folderRepository.findFolderByOwner(idOwner);
		return listFolder;
	}

}
